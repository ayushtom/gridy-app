{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAC9B,oDAA4B;AAC5B,gDAAwB;AACxB,2BAA+B;AAE/B,qCAAsC;AACtC,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;AAEtB,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;AACrC,QAAA,MAAM,GAAG,IAAI,qBAAW,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AAEjD,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAEtC,MAAM,GAAG,GAAG,IAAI,cAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;AAE7C,GAAG,CAAC,EAAE,CAAC,YAAY,EAAE,SAAS,UAAU,CAAC,EAAE,EAAE,GAAG;IAC9C,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;IAElC,qCAAqC;IACrC,iDAAiD;IACjD,8DAA8D;IAC9D,WAAW;IACX,6DAA6D;IAC7D,gFAAgF;IAChF,YAAY;IACZ,IAAI;IAEJ,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IAE9B,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,QAAQ,CAAC,OAAO;QACxC,gCAAgC;QAEhC,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC5C,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;gBACzB,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC9B,OAAO;QACT,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;QACjB,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,MAAM,EAAE,GAAG,cAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAChD,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;IACxC,YAAY,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAoC,EAAE,EAAE;QACjE,wBAAwB;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,IAAI,aAAa,KAAK,QAAQ,EAAE,CAAC;YAC/B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxB,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC","sourcesContent":["import express from \"express\";\nimport dotenv from \"dotenv\";\nimport http from \"http\";\nimport { WebSocket } from \"ws\";\nimport { ChangeStreamDocument } from \"mongodb\";\nimport { MongoClient } from \"mongodb\";\ndotenv.config();\n\nconst app = express();\n\nconst uri = process.env.MONGODB_CONNECTION_STRING;\nexport const client = new MongoClient(uri ?? \"\");\n\nconst server = http.createServer(app);\n\nconst wss = new WebSocket.Server({ server });\n\nwss.on(\"connection\", function connection(ws, req) {\n  const origin = req.headers.origin;\n\n  // // only allow gridy.com to connect\n  // if (origin && origin.endsWith(\".gridy.fun\")) {\n  //   console.log(`Connection allowed from origin: ${origin}`);\n  // } else {\n  //   console.log(`Connection denied from origin: ${origin}`);\n  //   ws.close(1008, \"Origin not allowed\"); // Close with a policy violation code\n  //   return;\n  // }\n\n  ws.on(\"error\", console.error);\n\n  ws.on(\"message\", function incoming(message) {\n    // if message is ping, send pong\n\n    try {\n      const data = JSON.parse(message.toString());\n      if (data.type === \"ping\") {\n        ws.send(JSON.stringify({ type: \"pong\" }));\n      }\n    } catch (e) {\n      console.error(\"Invalid JSON\");\n      return;\n    }\n  });\n\n  ws.on(\"open\", () => {\n    console.log(\"Connected to a client\");\n  });\n\n  const db = client.db(\"starknet\");\n  const collection = db.collection(\"tiles_mined\");\n  const changeStream = collection.watch();\n  changeStream.on(\"change\", (next: ChangeStreamDocument<Document>) => {\n    // process next document\n    const operationType = next.operationType;\n    if (operationType === \"insert\") {\n      ws.send(JSON.stringify(next.fullDocument));\n    }\n  });\n});\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\nserver.listen(process.env.PORT, () => {\n  console.log(\"Server started on port \", process.env.PORT);\n});\n"]}